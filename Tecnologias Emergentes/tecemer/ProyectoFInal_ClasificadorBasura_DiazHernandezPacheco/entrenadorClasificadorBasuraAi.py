# -*- coding: utf-8 -*-
"""ClasificadorBasuraAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J22lsXafidPKnsDCy4VICopupsNIHZkm

Universidad Iberoamericana Puebla - Ingeniería en Sistemas Computacionales

**Proyecto Final - Tecnologias Emergentes en Computación**
"""

from ultralytics import YOLO
from roboflow import Roboflow
import torch
import yaml
from pathlib import Path
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def setup_training_config():
    """Configurar parámetros de entrenamiento basados en hardware disponible"""
    config = {
        'epochs': 100,  # Aumentado para mejor convergencia
        'batch': 16,
        'imgsz': 640,
        'patience': 20,  # Early stopping
        # Usar GPU si está disponible
        'device': 'cuda' if torch.cuda.is_available() else 'cpu',
        'workers': min(8, max(1, torch.cuda.device_count() * 4)),
        'optimizer': 'Adam',  # Optimizer más estable
        'lr0': 0.001,  # Learning rate inicial
        'lrf': 0.01,   # Learning rate final
        'momentum': 0.937,
        'weight_decay': 0.0005,
        'warmup_epochs': 3,
        'warmup_momentum': 0.8,
        'warmup_bias_lr': 0.1,
        'box': 7.5,    # Box loss gain
        'cls': 0.5,    # Cls loss gain
        'dfl': 1.5,    # DFL loss gain
        'hsv_h': 0.015,  # Aumento de datos HSV-Hue
        'hsv_s': 0.7,    # Aumento de datos HSV-Sat
        'hsv_v': 0.4,    # Aumento de datos HSV-Val
        'degrees': 0.0,   # Rotación imagen
        'translate': 0.1,  # Traslación
        'scale': 0.5,    # Escala
        'shear': 0.0,    # Shear
        'perspective': 0.0,  # Perspectiva
        'flipud': 0.0,    # Flip up-down
        'fliplr': 0.5,    # Flip left-right
        'mosaic': 1.0,    # Mosaico
        'mixup': 0.0,     # Mixup
        'copy_paste': 0.0  # Copy-paste
    }
    return config


def load_dataset():
    """Cargar y verificar el dataset"""
    try:
        rf = Roboflow(api_key="DQyMUqUacVCW79AvMsBr")
        project = rf.workspace("projectverba").project("yolo-waste-detection")
        version = project.version(1)
        dataset = version.download("yolov8")

        # Verificar estructura del dataset
        data_yaml_path = Path(dataset.location) / "data.yaml"
        if not data_yaml_path.exists():
            raise FileNotFoundError(
                f"No se encontró data.yaml en {data_yaml_path}")

        with open(data_yaml_path) as f:
            data_config = yaml.safe_load(f)

        logger.info(
            f"Dataset cargado con éxito. Clases: {data_config.get('names', [])}")
        return data_yaml_path

    except Exception as e:
        logger.error(f"Error al cargar el dataset: {str(e)}")
        raise


def train_model(data_path, config):
    """Entrenar el modelo con los parámetros optimizados"""
    try:
        # Inicializar modelo
        model = YOLO("yolov8n.pt")

        # Entrenamiento
        results = model.train(
            data=data_path,  # Ruta correcta al archivo data.yaml
            epochs=config['epochs'],
            batch=config['batch'],
            imgsz=config['imgsz'],
            project="yolo_waste_detection",
            name="yolov8_training9",
            device=config['device']
        )

        # Validación
        val_results = model.val()
        logger.info(f"Métricas de validación: {val_results}")

        # Exportar modelo
        model.export(format="onnx", dynamic=True)
        logger.info("Modelo exportado en formato ONNX")

        return model, results

    except Exception as e:
        logger.error(f"Error durante el entrenamiento: {str(e)}")
        raise


if __name__ == "__main__":
    # Configurar entrenamiento
    config = setup_training_config()
    # Cargar dataset
    data_path = load_dataset()

    # Entrenar modelo
    model, results = train_model(data_path, config)
